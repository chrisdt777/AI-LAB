def calculate_heuristic(state):
    """Calculates the number of conflicting queen pairs in a given state."""
    n = len(state)
    conflicts = 0
    for i in range(n):
        for j in range(i + 1, n):
            if abs(i - j) == abs(state[i] - state[j]):
                conflicts += 1
    return conflicts

def generate_neighbors(state):
    """Generates all possible neighbor states by swapping two queens."""
    neighbors = []
    n = len(state)
    for i in range(n):
        for j in range(i + 1, n):
            new_state = state.copy()
            new_state[i], new_state[j] = new_state[j], new_state[i]
            neighbors.append(new_state)
    return neighbors

def print_board(state):
    """Prints the N-Queens board."""
    n = len(state)
    board = [['.'] * n for _ in range(n)]
    for row in range(n):
        board[row][state[row]] = 'Q'
    for row in board:
        print('  '.join(row))
    print()

def hill_climbing_n_queens(initial_state):
    """Solves the N-Queens problem using hill climbing."""
    current_state = initial_state

    while True:
        current_heuristic = calculate_heuristic(current_state)
        print(f"Current State: {current_state}, Heuristic: {current_heuristic}")
        print_board(current_state)

        if current_heuristic == 0:
            return current_state

        neighbors = generate_neighbors(current_state)
        best_neighbor = None
        best_heuristic = float('inf')

        for neighbor in neighbors:
            heuristic = calculate_heuristic(neighbor)
            if heuristic < best_heuristic:
                best_heuristic = heuristic
                best_neighbor = neighbor

        if best_heuristic >= current_heuristic:
            break

        current_state = best_neighbor

    return None

def solve_n_queens(n, initial_state=None):
    """Solves the N-Queens problem for a given number of queens."""
    if initial_state is None:
        initial_state = list(range(n))  # Initialize with a default state if not provided
    else:
        # Ensure the initial state is valid
        if len(initial_state) != n or len(set(initial_state)) != n:
            raise ValueError("Initial state must have unique values in the range [0, n-1].")
    
    solution = hill_climbing_n_queens(initial_state)

    if solution:
        print(f"Solution found for {n}-Queens problem: {solution}")
        print_board(solution)
    else:
        print("No solution found.")

# Example: Run the solver for 4 queens with a given initial state
initial_state = [3,1,2,0]  # Example of a given initial state
solve_n_queens(4, initial_state)
