import heapq

class Node:
    def __init__(self, state, parent=None, depth=0):
        self.state = state
        self.parent = parent
        self.depth = depth
        self.blank_pos = state.index(0)  # Position of the blank tile

    def get_children(self):
        children = []
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        blank_row, blank_col = divmod(self.blank_pos, 3)
        
        for dr, dc in directions:
            new_row, new_col = blank_row + dr, blank_col + dc
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_blank_pos = new_row * 3 + new_col
                new_state = self.state[:]
                new_state[self.blank_pos], new_state[new_blank_pos] = new_state[new_blank_pos], new_state[self.blank_pos]
                children.append(Node(new_state, self, self.depth + 1))
        
        return children

    def is_goal(self):
        return self.state == [1, 2, 3, 4, 5, 6, 7, 8, 0]

    def calculate_h_misplaced(self):
        return sum(1 for i, tile in enumerate(self.state) if tile != 0 and tile != i + 1)

    def calculate_f(self):
        return self.depth + self.calculate_h_misplaced()

    # For priority queue comparisons
    def __lt__(self, other):
        return self.calculate_f() < other.calculate_f()

def a_star_search_misplaced(initial_state):
    open_set = []
    closed_set = set()
    
    start_node = Node(initial_state)
    heapq.heappush(open_set, start_node)
    
    while open_set:
        current_node = heapq.heappop(open_set)
        
        if current_node.is_goal():
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return path[::-1]  # Return reversed path
        
        closed_set.add(tuple(current_node.state))
        
        for child in current_node.get_children():
            if tuple(child.state) in closed_set:
                continue
            
            # Check if the child is already in the open set
            if not any(tuple(open_node.state) == tuple(child.state) for open_node in open_set):
                heapq.heappush(open_set, child)
    
    return None  # No solution found

# Example usage for Misplaced Tiles
initial_state = [5,4,0,6,1,8,7,3,2]  # Change to test other states
print("Using Misplaced Tiles Heuristic:")
solution_misplaced = a_star_search_misplaced(initial_state)

if solution_misplaced:
    for step in solution_misplaced:
        print(step)
else:
    print("No solution found.")
