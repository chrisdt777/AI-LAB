import random

def hill_climbing(state):
    while True:
        current_cost = calculate_attacking_pairs(state)
        neighbor = get_best_neighbor(state)
        neighbor_cost = calculate_attacking_pairs(neighbor)
        
        if neighbor_cost >= current_cost:
            return state  # Return the current state if no better neighbor
        state = neighbor  # Move to the best neighbor

def get_best_neighbor(state):
    best_state = state
    best_cost = calculate_attacking_pairs(state)
    
    for i in range(len(state)):
        for j in range(len(state)):
            if j == state[i]:
                continue  # Skip the current position
            new_state = list(state)
            new_state[i] = j
            new_cost = calculate_attacking_pairs(new_state)
            
            if new_cost < best_cost:
                best_cost = new_cost
                best_state = new_state
    return best_state

# Helper function to calculate number of attacking pairs
def calculate_attacking_pairs(state):
    attacking_pairs = 0
    for i in range(len(state)):
        for j in range(i + 1, len(state)):
            if state[i] == state[j] or abs(state[i] - state[j]) == abs(i - j):
                attacking_pairs += 1
    return attacking_pairs

# Example initial state for 4-Queens
initial_state = [0, 1, 2, 3]
result = hill_climbing(initial_state)
print("Final state:", result)
